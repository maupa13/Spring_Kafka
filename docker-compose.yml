# The docker-compose.yml file defines a Docker Compose configuration for setting up
# a Zookeeper instance, a Kafka broker, Postgres database,
# two Spring Boot services, network for the Spring_Kafka application.

version: '3.8'

services:
  # Zookeeper service
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    environment:
      JVMFLAGS: "-Djava.security.auth.login.config=/etc/zookeeper/zookeeper_jaas.conf"
    volumes:
      - ./zookeeper_jaas.conf:/etc/zookeeper/zookeeper_jaas.conf
    ports:
      - 2181:2181
    networks:
      - proxy.network

  # Kafka service
  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://:9093,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_jaas.conf"
    volumes:
      - ./kafka_server_jaas.conf:/etc/kafka/kafka_jaas.conf
    networks:
      - proxy.network

  # Consumer service
  consumer:
    restart: always
    build:
      context: ./consumer-service
    environment:
      SPRING_PROFILES_ACTIVE: container
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      #
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      #
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: db
    ports:
      - 8081:8081
    depends_on:
      - zookeeper
      - kafka
    networks:
      - proxy.network

  # Producer service
  producer:
    restart: always
    build:
      context: ./producer-service
    environment:
      SPRING_PROFILES_ACTIVE: container
    ports:
      - 8082:8082
    depends_on:
      - zookeeper
      - kafka
    networks:
      - proxy.network

  # Database
  db:
    container_name: db
    image: 'postgres:13.1-alpine'
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - proxy.network

# Defines a custom network for communication between the services.
networks:
  proxy.network:
    driver: bridge